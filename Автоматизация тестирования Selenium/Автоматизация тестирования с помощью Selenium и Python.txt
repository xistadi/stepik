===============================================================================

1.1 Введение
Selenium WebDriver — универсальный интерфейс, который позволяет 
манипулировать разными браузерами напрямую из кода на языке 
программирования. 

1.4 Поиск элементов
По id - #id
По class - .class
Поиск по tag - h1
Поиск по значению атрибута - [id="bullet"], [value="Cat memes"]
Использование потомков id post2 class title - #post2.title
Поиск всех id posts с классом title - #posts .title (главное пробел)
Использование дочерних элементов - #post2 > div.title тоже самое для post2
Использование порядкового номера дочернего элемента - 
 #posts > .item:nth-child(2) > .title -  :nth-child(2) — позволяет найти 
 второй по порядку элемент среди дочерних элементов для "#posts"


XPath(XML Path Language) - это язык запросов, который использует древовидную 
структуру документа. 
/ это >, а // это пробел
el1/el2 — выбирает элементы el2, являющиеся прямыми потомками el1;
el1//el2 — выбирает элементы el2, являющиеся потомками el1 любой степени вложенности.

Символ [ ] — это команда фильтрации
по любому атрибуту, будь то id, class, title (или любой другой). Например, мы хотим найти картинку с летящим котом, для этого можно выполнить запрос //img[@id='bullet']
по порядковому номеру. Допустим, мы хотим выбрать вторую по порядку карточку с котом. Для этого найдем элемент с классом "row" и возьмем его второго потомка: //div[@class="row"]/div[2]
по полному совпадению текста. Да, XPath — это единственный способ найти элемент по внутреннему тексту. Если мы хотим найти блок текста с котом-Лениным, можно воспользоваться XPath селектором //p[text()="Lenin cat"]. Такой селектор вернет элемент, только если текст полностью совпадет. Здесь важно сказать, что не всегда поиск по тексту — это хорошая практика, особенно в случае мультиязычных сайтов.
по частичному совпадению текста или атрибута. Для этого нужна функция contains. Запрос //p[contains(text(), "cat")] вернет нам все абзацы текста, которые содержат слово cat. Точно так же можно искать по частичному совпадению других атрибутов, это удобно, если у элемента несколько классов. Посмотрите на код навбара сайта с котами. Его можно найти селектором //div[contains(@class, "navbar")]
в фильтрации еще можно использовать булевы операции (and, or, not) и некоторые простые арифметические выражения (но вообще не стоит, наверное). Допустим, мы хотим найти картинку обязательно с data-type "animal" и именем "bullet-cat", для этого подойдет запрос: //img[@name='bullet-cat' and @data-type='animal']

Символ * — команда выбора всех элементов
//div/*[@class="jumbotron-heading"]

1.6 Поиск элементов с помощью Selenium
find_element_by_id — поиск по уникальному атрибуту id элемента.
find_element_by_css_selector — поиск элемента с помощью правил на основе CSS.
find_element_by_xpath — поиск с помощью языка запросов XPath
find_element_by_name — поиск по атрибуту name элемента;
find_element_by_tag_name — поиск элемента по названию тега элемента;
find_element_by_class_name — поиск по значению атрибута class;
find_element_by_link_text — поиск ссылки на странице по полному совпадению;
find_element_by_partial_link_text — поиск ссылки на странице, если текст селектора совпадает с любой частью текста ссылки.

find_element()
Пример find_element(By.ID, "submit_button")
By.ID – поиск по уникальному атрибуту id элемента;
By.CSS_SELECTOR – поиск элементов с помощью правил на основе CSS;
By.XPATH – поиск элементов с помощью языка запросов XPath;
By.NAME – поиск по атрибуту name элемента;
By.TAG_NAME – поиск по названию тега;
By.CLASS_NAME – поиск по атрибуту class элемента;
By.LINK_TEXT – поиск ссылки с указанным текстом. Текст ссылки должен быть точным совпадением;
By.PARTIAL_LINK_TEXT – поиск ссылки по частичному совпадению текста.

===============================================================================

2.1 Основные методы Selenium
Checkbox и radiobutton(только один)
click() убираем или ставим check

Метод get_attribute
img = browser.find_element_by_tag_name('img')
x_element = img.get_attribute('valuex')

2.2 Работа с файлами, списками и js-скриптами

Выпадающий список сначала нажимаем на него потом выбираем чето
browser.find_element_by_tag_name("select").click()
browser.find_element_by_css_selector("option:nth-child(2)").click()
или 
browser.find_element_by_css_selector("[value='1']").click()

Вместо клика на список есть Select
from selenium.webdriver.support.ui import Select
select = Select(browser.find_element_by_tag_name("select"))
select.select_by_value("1")
так же можно
select.select_by_visible_text("Python")
select.select_by_index(1)

Метод execute_script
browser.execute_script("alert('Robots at work');")
Запускаем скрипт на js 

Проскролить до просмотра элемента
button = browser.find_element_by_tag_name("button")
browser.execute_script("return arguments[0].scrollIntoView(true);", button)
button.click()

Скролим 100 пикселей
browser.execute_script("window.scrollBy(0, 100);")


Загрузка файлов
import os 

current_dir = os.path.abspath(os.path.dirname(__file__))    # получаем путь к директории текущего исполняемого файла 
file_path = os.path.join(current_dir, 'file.txt')           # добавляем к этому пути имя файла 
element.send_keys(file_path)


2.3 Работа с окнами
Alerts 
alert('Hello!'); // js

alert = browser.switch_to.alert
alert.accept() # нажимаем ок для алерта

alert = browser.switch_to.alert
alert_text = alert.text # получаем текст алерта

confirm.dismiss() # нажимаем отмена в окне с ок и отмена

# promt алерт с вводом для ответа
prompt = browser.switch_to.alert
prompt.send_keys("My answer")
prompt.accept()


Переход на новую вкладку браузера
window_name = browser.window_handles[1]# получаем имя второй вкладки
browser.switch_to.window(window_name)# выбираем вторую вкладку


2.4 Настройка ожиданий
Замена time.sleep() - Selenium Waits (Implicit Waits)
browser.implicitly_wait(5) # для следующего элемента он будет искать каждые 0.5 сек в течении 5 сек


Ждем пока кнопка не станет активной для клика
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium import webdriver

browser = webdriver.Chrome()

browser.get("http://suninjuly.github.io/wait2.html")

# говорим Selenium проверять в течение 5 секунд, пока кнопка не станет кликабельной
button = WebDriverWait(browser, 5).until(
        EC.element_to_be_clickable((By.ID, "verify"))
    )
button.click()
message = browser.find_element_by_id("verify_message")

assert "successful" in message.text

У этой темы element_to_be_clickable есть и другие штуки
title_is
title_contains
presence_of_element_located
visibility_of_element_located
visibility_of
presence_of_all_elements_located
text_to_be_present_in_element
text_to_be_present_in_element_value
frame_to_be_available_and_switch_to_it
invisibility_of_element_located
element_to_be_clickable
staleness_of
element_to_be_selected
element_located_to_be_selected
element_selection_state_to_be
element_located_selection_state_to_be
alert_is_present
подробнее тут - https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.support.expected_conditions

===============================================================================

3.2
Проверка ожидаемого результата
Через assert
assert abs(-42) == 42 #True
assert abs(-42) == -42 #ошибка AssertionError

Собственный текст ошибки
assert abs(-42) == -42, 'Something wrong' # ошибка 'Something wrong'

тест-раннеры - unittest, PyTest и nose

unittest
#должно начинаться с test_
def test_name_for_your_test():

#пример
import unittest

class TestAbs(unittest.TestCase):
    def test_abs1(self):
        self.assertEqual(abs(-42), 42, "Should be absolute value of a number")
        
    def test_abs2(self):
        self.assertEqual(abs(-42), -42, "Should be absolute value of a number")
        
if __name__ == "__main__":
    unittest.main()


3.3
PyTest
pip install pytest
pytest работает на assert вместо assertEqual у unittest 

Запуск проверки pytest <название файла>

3.4
Классические фикстуры (fixtures)
PyTest — это вспомогательные функции для наших тестов, которые не являются частью тестового сценария
test_fixture1.py
Можем делать для всех тестов один запуск браузера а можем для каждого поотдельности


Фикстуры, возвращающие значение
test_fixture2.py

Финализаторы — закрываем браузер
test_fixture3.py

Область видимости scope
Для фикстур можно задавать область покрытия фикстур.
“function”, “class”, “module”, “session”
test_fixture3.py

Автоиспользование фикстур
При описании фикстуры можно указать дополнительный параметр 
autouse=True, который укажет, что фикстуру нужно запустить 
для каждого теста даже без явного вызова
test_fixture_autouse.py


3.5 PyTest — маркировка
Для маркировки теста нужно написать декоратор вида @pytest.mark.mark_name,
 где mark_name — произвольная строка.
test_fixture8.py
pytest.ini
pytest -m smoke test_fixture8.py #запустить только smoke mark

Пропуск тестов
чтобы пропустить тест, его отмечают в коде как @pytest.mark.skip

XFail: помечать тест как ожидаемо падающий
@pytest.mark.xfail

Параметризация тестов
PyTest позволяет запустить один и тот же тест с разными входными параметрами.
@pytest.mark.parametrize()
test_fixture7.py

Conftest.py — конфигурация тестов
conftest.py - передаем наш сюда веббраузер и теперь не надо каждый раз писать
import pytest
from selenium import webdriver

@pytest.fixture(scope="function")
def browser():
    print("\nstart browser for test..")
    browser = webdriver.Chrome()
    yield browser
    print("\nquit browser..")
    browser.quit()


Запуск другого браузера
pytest -s -v --browser_name=firefox test_cmd.py

===============================================================================

